1.分布式系统需要解决的几个问题：高稳定性，可扩展性，数据一致性（分布式事务，数据最终一致性－kafka）
2.秒杀活动需要解决的几个问题：
  1）杜绝网络投机者使用工具参与秒杀——图形验证码（简单图形验证码->计算验证码），缺陷是用户体验差
  2）数据一致性问题
      分库分表（水平拆分）
          var totaltables ＝ dbnums（总共有几个库）＊tables（每个库的表个数）
          var middle ＝ userid％totaltables
          dbno ＝ middle／totaltables
          tableno ＝ middle％totaltables；
      缓存层：分布式Memcached缓存，Redis。。。
  以上两个方案解决了并发问题，提高了系统的吞吐量，但是丢弃了数据库的事务，无法有效的保证数据的一致性
  常见思路有：区分浏览库存和实际库存，将浏览库存放在缓存中，实际库存放在数据库中
  写入问题，mysql数据库根据不同的存储引擎，使用了不一样的锁机制，myisam使用的是表锁，当一个用户写入时，整个表加入写锁，
  其他用户无法对该表执行任何动作，而innodb使用的是行锁，所以innodb更适合作为高并发写入的场景，但是秒杀业务的库存基本
  集中在几条纪录之上，所以行锁也无法解决并发带来的等待问题=>
      此时可以将一个库存拆分为多行，当用户下单后，减哪个库存可以采用特定的算法，比如id取模或者随机，最后对多行进行sum操作
      得出剩余的库存量，更新前台库存的缓存，当然这可能导致一个问题，就是当总库存量>0，而用户的下单请求，减库存操作被路由到
      库存为0的那条记录，那用户就秒杀失败了！

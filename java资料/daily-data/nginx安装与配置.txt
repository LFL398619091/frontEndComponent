nginx安装与配置
1）安装依赖包
yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel
2)nginx下载地址：http://nginx.org/download/nginx-1.10.1.tar.gz
./configure --prefix=/usr/local/nginx //设置安装目录
make && make install //编译并安装
3）启动与关闭nginx
cd /sbin 
./nginx //启动nginx 可通过 ps －ef ｜ grep nginx 可看nginx进程，会有一个master进程和一个worker进程
./nginx -s stop //关闭nginx 
./nginx -s reload //重启nginx服务
4)设置nginx开机启动
centos开机启动脚本：/etc/rc.d/rc.local
添加如下脚本：
#nginx
/usr/local/nginx/sbin/nginx
#mysql
service mysqld start
#tomcat
source /etc/profile  //需要依赖环境变量，必不可少
/usr/local/tomcat/apache-tomcat-8.0.35/bin/startup.sh
5）nginx负载均衡
server {
        listen       80;//监听端口号
        server_name  localhost:8080;

        #charset koi8-r;
        charset utf-8;

        #access_log  logs/host.access.log  main;
		upstream tomcats{
			#ip_hash;
			server 192.168.101.1:8080 weight=3;
			server 192.168.101.2:8080 weight=2;
			server 192.168.101.3:8080;
			server 192.168.101.4:8080 weight=2;
		}
        location /{
            #root   /usr/local/tomcat/apache-tomcat-8.0.35/webapps;
            #index  index.html index.htm;
            proxy_pass http://tomcats;//代理到真正的tomcat服务器
        }
}
负载均衡策略：
	内置的三种负载均衡粗略
	1）默认采用的是轮询，不设置weight权重，默认权重值是1
	2）ip_hash：原地址Hash值法，同一个客户端的请求，nginx会根据其ip进行hash计算，并确定它应该发送到后端哪台服务器
		当后端服务器数量没有发生增减变化，这个客户端的请求就sticky到了刚才接收请求的那台服务器（session问题貌似解决了）
	第三方负载均衡策略
	3）fair	
	4）url_hash 相同的url会分发到相同的后端服务器（可以极大的提高缓存的命中率）

Tomcat优化策略：
1）jvm内存优化：
设置等值的最小堆内存和最大堆内存
JAVA_OPTS＝$JAVA_OPTS -server -Xms2048m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=512m -Djava.awt.headless=true
JAVA_OPTS＝$JAVA_OPTS -server -Xms512m -Xmx512m -Djava.awt.headless=true

其中：server参数表示以服务器模式运行，特点是启动慢，运行快，适用于tomcat作为服务器运行
	 client参数表示以客户端模式运行，特点是启动快，运行慢，不适合作为服务器配置
	 Xms：最大堆内存  Xmx：最小堆内存
	 －XX：PermSize：最小PermSize
	 －XX：MaxPermSize：最大PermSize  当我们的项目包含很多jar包，并且使用了像SpringIoC这样的容器管理类的类的生命周期，
	 								设置这两个参数可以有效的避免java.lang.OutOfMemoryError异常，但是Java8以后
	 								不存在这个问题了(jdk1.8之后，这两个参数已经无效，原因是Perm代内存已经被MetaSpace取代，
	 								并且元空间和Heap内存已经共享了)
2）Tomcat并发能力优化
sever.xml Connector标签进行配置
<Connector port="8080" protocol="org.apache.coyote.http11.Http11NioProtocol"
               connectionTimeout="20000"
               redirectPort="8443"
               maxThreads="500"
               minSpareThreads="100"
               maxSpareThreads="200"
               acceptCount="200" 
               enableLookups="false"/>
 protocol:默认使用的是HTTP/1.1 bio协议，推荐使用org.apache.coyote.http11.Http11NioProtocol;第三种是apr，
 采用apr需要安装额外的三个组件，这种协议使用的是系统级异步io，对于大文件的处理具有很高的性能
 最大线程数：maxThreads，允许正在连接的最大用户请求数
 空闲线程数：线程池中允许存活的最大最小空闲线程
 				minSpareThreads="100"
                maxSpareThreads="200"
 等待线程数：acceptCount：就是当最大线程数用完了，还允许接收的连接数，不过这些连接都是处于等待状态
 综上：允许的最大用户连接数＝maxThreads＋acceptCount
 enableLookups：是否允许DNS反查，默认是false 服务器端执行getRemoteHostApi查询客户端主机名时，不会执行DNS反查
              
	 								
	 								
		